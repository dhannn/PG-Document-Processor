Title: Hackers, Heroes of the Computer Revolution
Author: Stephen Levy
Release Date: November, 1996
Language: English
Content:
hackers, heroes of the computer revolution, by steven levy (c)1984 by steven levy chapters 1 and 2 of hackers, heroes of the computer revolution by steven levy who's who the wizards and their machines bob albrecht found of people's computer company who took visceral pleasure in exposing youngsters to computers. altair 8800 the pioneering microcomputer that galvanized hardware hackers. building this kit made you learn hacking. then you tried to figure out what to do with it. apple ii ][ steve wozniak's friendly, flaky, good-looking computer, wildly successful and the spark and soul of a thriving industry. atari 800 this home computer gave great graphics to game hackers like john harris, though the company that made it was loath to tell you how it worked. bob and carolyn box world-record-holding gold prospectors turned software stars, working for sierra on-line. doug carlston corporate lawyer who chucked it all to form the broderbund software company. bob davis left job in liquor store to become best-selling author of sierra on-line computer game "ulysses and the golden fleece." success was his downfall. peter deutsch bad in sports, brilliant at math, peter was still in short pants when he stubled on the tx-0 at mit--and hacked it along with the masters. steve dompier homebrew member who first made the altair sing, and later wrote the "targe" game on the sol which entranced tom snyder. john draper the notorious "captain crunch" who fearlessly explored the phone systems, got jailed, hacked microprocessors. cigarettes made his violent. mark duchaineau the young dungeonmaster who copy-protected on-lines disks at his whim. chris esponosa fourteen-year-old follower of steve wozniak and early apple employee. lee felsenstein former "military editor" of berkeley barb, and hero of an imaginary science-fiction novel, he designed computers with "junkyard" approach and was central figure in bay area hardware hacking in the seventies. ed fredkin gentle founder of information international, thought himself world's greates programmer until he met stew nelson. father figure to hackers. gordon french silver-haired hardware hacker whose garage held not cars but his homebrewed chicken hawk comptuer, then held the first homebrew computer club meeting. richard garriott astronaut's son who, as lord british, created ultima world on computer disks. bill gates cocky wizard, harvard dropout who wrote altair basic, and complained when hackers copied it. bill gosper horwitz of computer keyboards, master math and life hacker at mit ai lab, guru of the hacker ethic and student of chinese restaurant menus. richard greenblatt single-minded, unkempt, prolific, and canonical mit hacker who went into night phase so often that he zorched his academic career. the hacker's hacker. john harris the young atari 800 game hacker who became sierra on-line's star programmer, but yearned for female companionship. ibm-pc ibm's entry into the personal computer market which amazingly included a bit of the hacker ethic, and took over. [h.e. as open architecture.] ibm 704 ibm was the enemy, and this was its machine, the hulking giant computer in mit's building 26. later modified into the ibm 709, then the ibm 7090. batch-processed and intolerable. jerry jewell vietnam vet turned programmer who founded sirius software. steven jobs visionary, beaded, non-hacking youngster who took wozniak's apple ii ][, made a lot of deals, and formed a company that would make a billion dollars. tom knight at sixteen, an mit hacker who would name the incompatible time-sharing system. later a greenblatt nemesis over the lisp machine schism. alan kotok the chubby mit student from jersey who worked under the rail layout at tmrc, learned the phone system at western electric, and became a legendary tx-0 and pdp-1 hacker. effrem lipkin hacker-activist from new york who loved machines but hated their uses. co-founded community memory; friend of felsenstein. lisp machine the ultimate hacker computer, invented mosly by greenblatt and subject of a bitter dispute at mit. "uncle" john mccarthy absent-minded but brilliant mit [later stanford] professor who helped pioneer computer chess, artificial intelligence, lisp. bob marsh berkeley-ite and homebrewer who shared garage with felsenstein and founded processor technology, which made the sol computer. roger melen homebrewer who co-founded cromemco company to make circuit boards for altair. his "dazzler" played life programs on his kitchen table. louis merton pseudonym for the ai chess hacker whose tendency to go catatonic brought the hacker community together. jude milhon met lee felsenstein through a classified ad in the berkeley barb, and became more than a friend-- a member of the community memory collective. marvin minsky playful and brilliant mit prof who headed the ai lave and allowed the hackers to run free. fred moore vagabond pacifist who hated money, loved technology, and co-founded homebrew club. stewart nelson buck-toothed, diminutive, but fiery ai lab hacker who connected the pdp-1 comptuer to hack the phone system. later co-founded the systems concepts company. ted nelson self-described "innovator" and noted curmudgeon who self-published the influential computer lib book. russel noftsker harried administrator of mit ai lab in the late sixties; later president of symbolics company. adam osborne bangkok-born publisher-turned-computer-manufacturer who considered himself a philsopher. founded osborne computer company to make "adequate" machines. pdp-1 digital equipment's first minicomputer, and in 1961 an interactive godsend to the mit hackers and a slap in the face to ibm fascism. pdp-6 designed in part by kotok, this mainframe computer was cornerstone of ai lab, with its gorgeious instruction set and sixteen sexy registers. tom pittman the religious homebrew hacker who lost his wife but kept the faith with his tiny basic. ed roberts enigmatic founder of mits company who shook the world with his altair computer. he wanted to help people build mental pyramids. steve [slug] russell mccarthy's "coolie," who hacked the spacewar program, first videogame, on the pdp-1. never made a dime from it. peter samson mit hacker, one of the first, who loved systems, trains, tx-0, music, parliamentary procedure, pranks, and hacking. bob saunders jolly, balding tmrc hacker who married early, hacked till late at night eating "lemon gunkies," and mastered the "cbs strategy on spacewar. warren schwader big blond hacker from rural wisconsin who went from the assembly line to software stardom but couldn't reconcile the shift with his devotion to jehovah's witnesses. david silver left school at fourteen to be mascot of ai lab; maker of illicit keys and builder of a tiny robot that did the impossible. dan sokol long-haired prankster who reveled in revealing technological secrets at homebrew club. helped "liberate" alair basic on paper tape. les solomon editor of popular electroics, the puller of strings who set the computer revolution into motion. marty spergel the junk man, the homebrew member who supplied circuits and cables and could make you a deal for anything. richard stallman the last of the hackers, who vowed to defend the principles of hackerism to the bitter end. remained at mit until there was no one to eat chinese food with. jeff stephenson thirty-year-old martial arts veteran and hacker who was astounded that joining sierra on-line meant enrolling in summer camp. jay sullivan maddeningly clam wizard-level programmer at informatics who impressed ken williams by knowing the meaning of the word "any." dick sunderland chalk-complexioned mba who believed that firm managerial bureaucracy was a worth goal, but as president of sierra on-line found that hackers didn't think that way. gerry sussman young mit hacker branded "loser" because he smoked a pipe and "munged" his programs; later became "winner" by algorithmic magic. margot tommervik with her husband al, long-haired margot parlayed her game show winnings into a magazine that deified the apple computer. tom swift terminal lee felsenstein's legendary, never-to-be-built computer terminal which would give the user ultimate leave to get his hands on the world. tx-0 filled a small room, but in the late fifties this $3 million machine was the world's first personal computer--for the community of mit hackers that formed around it. jim warren portly purveyor of "techno-gossip" at homebrew, he was first editor of hippie-styled dr. dobbs journal, later started the lucrative computer faire. randy wigginton fifteen-year-old member of steve wozniak's kiddie corps, he help woz trundle the apple ii to homebrew. still in high school when he became apple's first software employee. ken williams arrogant and brilliant young programmer who saw the writing on the crt and started sierra on-line to make a killing and improve society by selling games for the apple computer. roberta williams ken williams' timid wife who rediscovered her own creativity by writing "mystery house," the first of her many bestselling computer games. steven "woz" wozniak openhearted, technologically daring hardware hacker from san jose suburbs. woz built the apple computer for the pleasure of himself and friends. part one true hackers cambridge: the fifties and sixties chapter 1 the tech model railroad club just why peter samson was wandering around in building 26 in the middle of the night is a matter that he would find difficult to explain. some things are not spoken. if you were like the people whom peter samson was coming to know and befriend in this, his freshman year at the massachusetts institute of technology in the winter of 1958-59, no explanation would be required. wandering around the labyrinth of laboratories and storerooms, searching for the secrets of telephone switching in machine rooms, tracing paths of wires or relays in subterranean steam tunnels . . . for some, it was common behavior, and there was no need to justify the impulse, when confronted with a closed door with an unbearably intriguing noise behind it, to open the door uninvited. and then, if there was no one to physically bar access to whatever was making that intriguing noise, to touch the machine, start flicking switches and noting responses, and eventually to loosen a screw, unhook a template, jiggle some diodes and tweak a few connections. peter samson and his friends had grown up with a specific relationship to the world, wherein things had meaning only if you found out how they worked. and how would you go about that if not by getting your hands on them? it was in the basement of building 26 that samson and his friends discovered the eam room. building 26 was a long glass-and-steel structure, one of mit's newer buildings, contrasting with the venerable pillared structures that fronted the institute on massachusetts avenue. in the basement of this building void of personality, the eam room. electronic accounting machinery. a room that housed machines which ran like computers. not many people in 1959 had even seen a computer, let alone touched one. samson, a wiry, curly-haired redhead with a way of extending his vowels so that it would seem he was racing through lists of possible meanings of statements in mid-word, had viewed computers on his visits to mit from his hometown of lowell, massachusetts, less than thirty miles from campus. this made him a "cambridge urchin," one of dozens of science-crazy high schoolers in the region who were drawn, as if by gravitational pull, to the cambridge campus. he had even tried to rig up his own computer with discarded parts of old pinball machines: they were the best source of logic elements he could find. logic elements: the term seems to encapsulate what drew peter samson, son of a mill machinery repairman, to electronics. the subject made sense. when you grow up with an insatiable curiosity as to how things work, the delight you find upon discovering something as elegant as circuit logic, where all connections have to complete their loops, is profoundly thrilling. peter samson, who early on appreciated the mathematical simplicity of these things, could recall seeing a television show on boston's public tv channel, wgbh, which gave a rudimentary introduction to programming a computer in its own language. it fired his imagination: to peter samson, a computer was surely like aladdin's lamp--rub it, and it would do your bidding. so he tried to learn more about the field, built machines of his own, entered science project competitions and contests, and went to the place that people of his ilk aspired to: mit. the repository of the very brightest of those weird high school kids with owl-like glasses and underdeveloped pectorals who dazzled math teachers and flunked pe, who dreamed not of scoring on prom night, but of getting to the finals of the general electric science fair competition. mit, where he would wander the hallways at two o'clock in the morning, looking for something interesting, and where he would indeed discover something that would help draw him deeply into a new form of creative process, and a new life-style, and would put him into the forefront of a society envisioned only by a few science-fiction writers of mild disrepute. he would discover a computer that he could play with. the eam room which samson had chanced on was loaded with large keypunch machines the size of squat file cabinets. no one was protecting them: the room was staffed only by day, when a select group who had attained official clearance were privileged enough to submit long manila cards to operators who would then use these machines to punch holes in them according to what data the privileged ones wanted entered on the cards. a hole in the card would represent some instruction to the computer, telling it to put a piece of data somewhere, or perform a function on a piece of data, or move a piece of data from one place to another. an entire stack of these cards made one computer program, a program being a series of instructions which yield some expected result, just as the instructions in a recipe, when precisely followed, lead to a cake. those cards would be taken to yet another operator upstairs who would feed the cards into a "reader" that would note where the holes were and dispatch this information to the ibm 704 computer on the first floor of building 26. the hulking giant. the ibm 704 cost several million dollars, took up an entire room, needed constant attention from a cadre of professional machine operators, and required special air-conditioning so that the glowing vacuum tubes inside it would not heat up to data-destroying temperatures. when the air-conditioning broke down--a fairly common occurrences--a loud gong would sound, and three engineers would spring from a nearby office to frantically take covers off the machine so its innards wouldn't melt. all these people in charge of punching cards, feeding them into readers, and pressing buttons and switches on the machine were what was commonly called a priesthood, and those privileged enough to submit data to those most holy priests were the official acolytes. it was an almost ritualistic exchange. acolyte: oh machine, would you accept my offer of information so you may run my program and perhaps give me a computation? priest (on behalf of the machine): we will try. we promise nothing. as a general rule, even these most privileged of acolytes were not allowed direct access to the machine itself, and they would not be able to see for hours, sometimes for days, the results of the machine's ingestion of their "batch" of cards. this was something samson knew, and of course it frustrated the hell out of samson, who wanted to get at the damn machine. for this was what life was all about. what samson did not know, and was delighted to discover, was that the eam room also had a particular keypunch machine called the 407. not only could it punch cards, but it could also read cards, sort them, and print them on listings. no one seemed to be guarding these machines, which were computers, sort of. of course, using them would be no picnic: one needed to actually wire up what was called a plug board, a two-inch-by-two-inch plastic square with a mass of holes in it. if you put hundreds of wires through the holes in a certain order, you would get something that looked like a rat's nest but would fit into this electromechanical machine and alter its personality. it could do what you wanted it to do. so, without any authorization whatsoever, that is what peter samson set out to do, along with a few friends of his from an mit organization with a special interest in model railroading. it was a casual, unthinking step into a science-fiction future, but that was typical of the way that an odd subculture was pulling itself up by its bootstraps and growing to underground prominence--to become a culture that would be the impolite, unsanctioned soul of computerdom. it was among the first computer hacker escapades of the tech model railroad club, or tmrc. * * * peter samson had been a member of the tech model railroad club since his first week at mit in the fall of 1958. the first event that entering mit freshmen attended was a traditional welcoming lecture, the same one that had been given for as long as anyone at mit could remember. look at the person to your left . . . look at the person to your right . . . one of you three will not graduate from the institute. the intended effect of the speech was to create that horrid feeling in the back of the collective freshman throat that signaled unprecedented dread. all their lives, these freshmen had been almost exempt from academic pressure. the exemption had been earned by virtue of brilliance. now each of them had a person to the right and a person to the left who was just as smart. maybe even smarter. but to certain students this was no challenge at all. to these youngsters, classmates were perceived in a sort of friendly haze: maybe they would be of assistance in the consuming quest to find out how things worked, and then to master them. there were enough obstacles to learning already--why bother with stupid things like brown-nosing teachers and striving for grades? to students like peter samson, the quest meant more than the degree. sometime after the lecture came freshman midway. all the campus organizations--special-interest groups, fraternities, and such-- set up booths in a large gymnasium to try to recruit new members. the group that snagged peter was the tech model railroad club. its members, bright-eyed and crew-cutted upperclassmen who spoke with the spasmodic cadences of people who want words out of the way in a hurry, boasted a spectacular display of ho gauge trains they had in a permanent clubroom in building 20. peter samson had long been fascinated by trains, especially subways. so he went along on the walking tour to the building, a shingle-clad temporary structure built during world war ii. the hallways were cavernous, and even though the clubroom was on the second floor it had the dank, dimly lit feel of a basement. the clubroom was dominated by the huge train layout. it just about filled the room, and if you stood in the little control area called "the notch" you could see a little town, a little industrial area, a tiny working trolley line, a papier-mache mountain, and of course a lot of trains and tracks. the trains were meticulously crafted to resemble their full-scale counterparts, and they chugged along the twists and turns of track with picture-book perfection. and then peter samson looked underneath the chest-high boards which held the layout. it took his breath away. underneath this layout was a more massive matrix of wires and relays,and crossbar switches than peter samson had ever dreamed existed. there were neat regimental lines of switches, and achingly regular rows of dull bronze relays, and a long, rambling tangle of red, blue, and yellow wires--twisting and twirling like a rainbow-colored explosion of einstein's hair. it was an incredibly complicated system, and peter samson vowed to find out how it worked. the tech model railroad club awarded its members a key to the clubroom after they logged forty hours of work on the layout. freshman midway had been on a friday. by monday, peter samson had his key. * * * there were two factions of tmrc. some members loved the idea of spending their time building and painting replicas of certain trains with historical and emotional value, or creating realistic scenery for the layout. this was the knife-and-paintbrush contingent, and it subscribed to railroad magazines and booked the club for trips on aging train lines. the other faction centered on the signals and power subcommittee of the club, and it cared far more about what went on under the layout. this was the system, which worked something like a collaboration between rube goldberg and wernher von braun, and it was constantly being improved, revamped, perfected, and sometimes "gronked"--in club jargon, screwed up. s&p people were obsessed with the way the system worked, its increasing complexities, how any change you made would affect other parts, and how you could put those relationships between the parts to optimal use. many of the parts for the system had been donated by the western electric college gift plan, directly from the phone company. the club's faculty advisor was also in charge of the campus phone system, and had seen to it that sophisticated phone equipment was available for the model railroaders. using that equipment as a starting point, the railroaders had devised a scheme which enabled several people to control trains at once, even if the trains were at different parts of the same track. using dials appropriated from telephones, the tmrc "engineers" could specify which block of track they wanted control of, and run a train from there. this was done by using several types of phone company relays, including crossbar executors and step switches which let you actually hear the power being transferred from one block to another by an other-worldly chunka-chunka-chunka sound. it was the s&p group who devised this fiendishly ingenious scheme, and it was the s&p group who harbored the kind of restless curiosity which led them to root around campus buildings in search of ways to get their hands on computers. they were lifelong disciples of a hands-on imperative. head of s&p was an upperclassman named bob saunders, with ruddy, bulbous features, an infectious laugh, and a talent for switch gear. as a child in chicago, he had built a high-frequency transformer for a high school project; it was his six-foot-high version of a tesla coil, something devised by an engineer in the 1800s which was supposed to send out furious waves of electrical power. saunders said his coil project managed to blow out television reception for blocks around. another person who gravitated to s&p was alan kotok, a plump, chinless, thick-spectacled new jerseyite in samson's class. kotok's family could recall him, at age three, prying a plug out of a wall with a screwdriver and causing a hissing shower of sparks to erupt. when he was six, he was building and wiring lamps. in high school he had once gone on a tour of the mobil research lab in nearby haddonfield, and saw his first computer--the exhilaration of that experience helped him decide to enter mit. in his freshman year, he earned a reputation as one of tmrc's most capable s&p people. the s&p people were the ones who spent saturdays going to eli heffron's junkyard in somerville scrounging for parts, who would spend hours on their backs resting on little rolling chairs they called "bunkies" to get underneath tight spots in the switching system, who would work through the night making the wholly unauthorized connection between the tmrc phone and the east campus. technology was their playground. the core members hung out at the club for hours; constantly improving the system, arguing about what could be done next, developing a jargon of their own that seemed incomprehensible to outsiders who might chance on these teen-aged fanatics, with their checked short-sleeve shirts, pencils in their pockets, chino pants, and, always, a bottle of coca-cola by their side. (tmrc purchased its own coke machine for the then forbidding sum of $165; at a tariff of five cents a bottle, the outlay was replaced in three months; to facilitate sales, saunders built a change machine for coke buyers that was still in use a decade later.) when a piece of equipment wasn't working, it was "losing"; when a piece of equipment was ruined, it was "munged" (mash until no good); the two desks in the corner of the room were not called the office, but the "orifice"; one who insisted on studying for courses was a "tool"; garbage was called "cruft"; and a project undertaken or a product built not solely to fulfill some constructive goal, but with some wild pleasure taken in mere involvement, was called a "hack." this latter term may have been suggested by ancient mit lingo-- the word "hack" had long been used to describe the elaborate college pranks that mit students would regularly devise, such as covering the dome that overlooked the campus with reflecting foil. but as the tmrc people used the word, there was serious respect implied. while someone might call a clever connection between relays a "mere hack," it would be understood that, to qualify as a hack, the feat must be imbued with innovation, style, and technical virtuosity. even though one might self-deprecatingly say he was "hacking away at the system" (much as an axe-wielder hacks at logs), the artistry with which one hacked was recognized to be considerable. the most productive people working on signals and power called themselves "hackers" with great pride. within the confines of the clubroom in building 20, and of the "tool room" (where some study and many techno bull sessions took place), they had unilaterally endowed themselves with the heroic attributes of icelandic legend. this is how peter samson saw himself and his friends in a sandburg-esque poem in the club newsletter: switch thrower for the world, fuze tester, maker of routes, player with the railroads and the system's advance chopper; grungy, hairy, sprawling, machine of the point-function line-o-lite: they tell me you are wicked and i believe them; for i have seen your painted light bulbs under the lucite luring the system coolies . . . under the tower, dust all over the place, hacking with bifur- cated springs . . . hacking even as an ignorant freshman acts who has never lost occupancy and has dropped out hacking the m-boards, for under its locks are the switches, and under its control the advance around the layout, hacking! hacking the grungy, hairy, sprawling hacks of youth; uncabled, frying diodes, proud to be switch-thrower, fuze- tester, maker of routes, player with railroads, and advance chopper to the system. whenever they could, samson and the others would slip off to the eam room with their plug boards, trying to use the machine to keep track of the switches underneath the layout. just as important, they were seeing what the electromechanical counter could do, taking it to its limit. that spring of 1959, a new course was offered at mit. it was the first course in programming a computer that freshmen could take. the teacher was a distant man with a wild shock of hair and an equally unruly beard--john mccarthy. a master mathematician, mccarthy was a classically absent-minded professor; stories abounded about his habit of suddenly answering a question hours, sometimes even days after it was first posed to him. he would approach you in the hallway, and with no salutation would begin speaking in his robotically precise diction, as if the pause in conversation had been only a fraction of a second, and not a week. most likely, his belated response would be brilliant. mccarthy was one of a very few people working in an entirely new form of scientific inquiry with computers. the volatile and controversial nature of his field of study was obvious from the very arrogance of the name that mccarthy had bestowed upon it: artificial intelligence. this man actually thought that computers could be smart. even at such a science-intensive place as mit, most people considered the thought ridiculous: they considered computers to be useful, if somewhat absurdly expensive, tools for number-crunching huge calculations and for devising missile defense systems (as mit's largest computer, the whirlwind, had done for the early-warning sage system), but scoffed at the thought that computers themselves could actually be a scientific field of study, computer science did not officially exist at mit in the late fifties, and mccarthy and his fellow computer specialists worked in the electrical engineering department, which offered the course, no. 641, that kotok, samson, and a few other trmc members took that spring. mccarthy had started a mammoth program on the ibm 704--the hulking giant--that would give it the extraordinary ability to play chess. to critics of the budding field of artificial intelligence, this was just one example of the boneheaded optimism of people like john mccarthy. but mccarthy had a certain vision of what computers could do, and playing chess was only the beginning. all fascinating stuff, but not the vision that was driving kotok and samson and the others. they wanted to learn how to work the damn machines, and while this new programming language called lisp that mccarthy was talking about in 641 was interesting, it was not nearly as interesting as the act of programming, or that fantastic moment when you got your printout back from the priesthood--word from the source itself!--and could then spend hours poring over the results of the program, what had gone wrong with it, how it could be improved. the tmrc hackers were devising ways to get into closer contact with the ibm 704, which soon was upgraded to a newer model called the 709. by hanging out at the computation center in the wee hours of the morning, and by getting to know the priesthood, and by bowing and scraping the requisite number of times, people like kotok were eventually allowed to push a few buttons on the machine, and watch the lights as it worked. there were secrets to those ibm machines that had been painstakingly learned by some of the older people at mit with access to the 704 and friends among the priesthood. amazingly, a few of these programmers, grad students working with mccarthy, had even written a program that utilized one of the rows of tiny lights: the lights would be lit in such an order that it looked like a little ball was being passed from right to left: if an operator hit a switch at just the right time, the motion of the lights could be reversed--computer ping-pong! this obviously was the kind of thing that you'd show off to impress your peers, who would then take a look at the actual program you had written and see how it was done. to top the program, someone else might try to do the same thing with fewer instructions--a worthy endeavor, since there was so little room in the small "memory" of the computers of those days that not many instructions could fit into them, john mccarthy had once noticed how his graduate students who loitered around the 704 would work over their computer programs to get the most out of the fewest instructions, and get the program compressed so that fewer cards would need to be fed to the machine. shaving off an instruction or two was almost an obsession with them. mccarthy compared these students to ski bums. they got the same kind of primal thrill from "maximizing code" as fanatic skiers got from swooshing frantically down a hill. so the practice of taking a computer program and trying to cut off instructions without affecting the outcome came to be called "program bumming," and you would often hear people mumbling things like "maybe i can bum a few instructions out and get the octal correction card loader down to three cards instead of four." mccarthy in 1959 was turning his interest from chess to a new way of talking to the computer, the whole new "language" called lisp. alan kotok and his friends were more than eager to take over the chess project. working on the batch-processed ibm, they embarked on the gargantuan project of teaching the 704, and later the 709, and even after that its replacement the 7090, how to play the game of kings. eventually kotok's group became the largest users of computer time in the entire mit computation center. still, working with the ibm machine was frustrating. there was nothing worse than the long wait between the time you handed in your cards and the time your results were handed back to you. if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again. it went hand in hand with the stifling proliferation of goddamn rules that permeated the atmosphere of the computation center. most of the rules were designed to keep crazy young computer fans like samson and kotok and saunders physically distant from the machine itself. the most rigid rule of all was that no one should be able to actually touch or tamper with the machine itself. this, of course, was what those signals and power people were dying to do more than anything else in the world, and the restrictions drove them mad. one priest--a low-level sub-priest, really--on the late-night shift was particularly nasty in enforcing this rule, so samson devised a suitable revenge. while poking around at eli's electronic junk shop one day, he chanced upon an electrical board precisely like the kind of board holding the clunky vacuum tubes which resided inside the ibm. one night, sometime before 4 a.m., this particular sub-priest stepped out for a minute; when he returned, samson told him that the machine wasn't working, but they'd found the trouble--and held up the totally smashed module from the old 704 he'd gotten at eli's. the sub-priest could hardly get the words out. "w-where did you get that?" samson, who had wide green eyes that could easily look maniacal, slowly pointed to an open place on the machine rack where, of course, no board had ever been, but the space still looked sadly bare. the sub-priest gasped. he made faces that indicated his bowels were about to give out. he whimpered exhortations to the deity. visions, no doubt, of a million-dollar deduction from his paycheck began flashing before him. only after his supervisor, a high priest with some understanding of the mentality of these young wiseguys from the model railroad club, came and explained the situation did he calm down. he was not the last administrator to feel the wrath of a hacker thwarted in the quest for access. * * * one day a former tmrc member who was now on the mit faculty paid a visit to the clubroom. his name was jack dennis. when he had been an undergraduate in the early 1950s, he had worked furiously underneath the layout. dennis lately had been working a computer which mit had just received from lincoln lab, a military development laboratory affiliated with the institute. the computer was called the tx-0, and it was one of the first transistor-run computers in the world. lincoln lab had used it specifically to test a giant computer called the tx-2, which had a memory so complex that only with this specially built little brother could its ills be capably diagnosed. now that its original job was over, the three-million-dollar tx-0 had been shipped over to the institute on "long-term loan," and apparently no one at lincoln lab had marked a calendar with a return date. dennis asked the s&p people at tmrc whether they would like to see it. hey you nuns! would you like to meet the pope? the tx-0 was in building 26, in the second-floor radio laboratory of electronics (rle), directly above the first-floor computation center which housed the hulking ibm 704. the rle lab resembled the control room of an antique spaceship. the tx-0, or tixo, as it was sometimes called, was for its time a midget machine, since it was one of the first computers to use finger-size transistors instead of hand-size vacuum tubes. still, it took up much of the room, along with its fifteen tons of supporting air-conditioning equipment. the tx-o's workings were mounted on several tall, thin chassis, like rugged metal bookshelves, with tangled wires and neat little rows of tiny, bottle-like containers in which the transistors were inserted. another rack had a solid metal front speckled with grim-looking gauges. facing the racks was an l-shaped console, the control panel of this h. g. wells spaceship, with a blue countertop for your elbows and papers. on the short arm of the l stood a flexowriter, which resembled a typewriter converted for tank warfare, its bottom anchored in a military gray housing. above the top were the control panels, boxlike protrusions painted an institutional yellow. on the sides of the boxes which faced the user were a few gauges, several lines of quarter-inch blinking lights, a matrix of steel toggle switches the size of large grains of rice, and, best of all, an actual cathode ray tube display, round and smoke-gray. the tmrc people were awed. this machine did not use cards. the user would first punch in a program onto a long, thin paper tape with a flexowriter (there were a few extra flexowriters in an adjoining room), then sit at the console, feed in the program by running the tape through a reader, and be able to sit there while the program ran. if something went wrong with the program, you knew immediately, and you could diagnose the problem by using some of the switches, or checking out which of the lights were blinking or lit. the computer even had an audio output: while the program ran, a speaker underneath the console would make a sort of music, like a poorly tuned electric organ whose notes would vibrate with a fuzzy, ethereal din. the chords on this "organ" would change, depending on what data the machine was reading at any given microsecond; after you were familiar with the tones, you could actually hear what part of your program the computer was working on. you would have to discern this, though, over the clacking of the flexowriter, which could make you think you were in the middle of a machine-gun battle. even more amazing was that, because of these "interactive" capabilities, and also because users seemed to be allowed blocks of time to use the tx-0 all by themselves, you could even modify a program while sitting at the computer. a miracle! there was no way in hell that kotok, saunders, samson, and the others were going to be kept away from that machine. fortunately, there didn't seem to be the kind of bureaucracy surrounding the tx-0 that there was around the ibm 704. no cadre of officious priests. the technician in charge was a canny white-haired scotsman named john mckenzie. while he made sure that graduate students and those working on funded projects-- officially sanctioned users--maintained access to the machine, mckenzie tolerated the crew of tmrc madmen who began to hang out in the rle lab, where the tx-0 stood. samson, kotok, saunders, and a freshman named bob wagner soon figured out that the best time of all to hang out in building 26 was at night, when no person in his right mind would have signed up for an hour-long session on the piece of paper posted every friday beside the air conditioner in the rle lab. the tx-0 as a rule was kept running twenty-four hours a day--computers back then were too expensive for their time to be wasted by leaving them idle through the night, and besides, it was a hairy procedure to get the thing up and running once it was turned off. so the tmrc hackers, who soon were referring to themselves as tx-0 hackers, changed their life-style to accommodate the computer. they laid claim to what blocks of time they could, and would "vulture time" with nocturnal visits to the lab on the off chance that someone who was scheduled for a 3 a.m. session might not show up. "oh!" samson would say delightedly, a minute or so after someone failed to show up at the time designated in the logbook. "make sure it doesn't go to waste!" it never seemed to, because the hackers were there almost all the time. if they weren't in the rle lab waiting for an opening to occur, they were in the classroom next to the tmrc clubroom, the tool room, playing a "hangman"-style word game that samson had devised called "come next door," waiting for a call from someone who was near the tx-0, monitoring it to see if someone had not shown up for a session. the hackers recruited a network of informers to give advance notice of potential openings at the computer--if a research project was not ready with its program in time, or a professor was sick, the word would be passed to tmrc and the hackers would appear at the tx-0, breathless and ready to jam into the space behind the console. though jack dennis was theoretically in charge of the operation, dennis was teaching courses at the time, and preferred to spend the rest of his time actually writing code for the machine. dennis played the role of benevolent godfather to the hackers: he would give them a brief hands-on introduction to the machine, point them in certain directions, be amused at their wild programming ventures. he had little taste for administration, though, and was just as happy to let john mckenzie run things. mckenzie early on recognized that the interactive nature of the tx-0 was inspiring a new form of computer programming, and the hackers were its pioneers. so he did not lay down too many edicts. the atmosphere was loose enough in 1959 to accommodate the strays--science-mad people whose curiosity burned like a hunger, who like peter samson would be exploring the uncharted maze of laboratories at mit. the noise of the air-conditioning, the audio output, and the drill-hammer flexowriter would lure these wanderers, who'd poke their heads into the lab like kittens peering into baskets of yarn. one of those wanderers was an outsider named peter deutsch. even before discovering the tx-0, deutsch had developed a fascination for computers. it began one day when he picked up a manual that someone had discarded, a manual for an obscure form of computer language for doing calculations. something about the orderliness of the computer instructions appealed to him: he would later describe the feeling as the same kind of eerily transcendent recognition that an artist experiences when he discovers the medium that is absolutely right for him. this is where i belong. deutsch tried writing a small program, and, signing up for time under the name of one of the priests, ran it on a computer. within weeks, he had attained a striking proficiency in programming. he was only twelve years old. he was a shy kid, strong in math and unsure of most everything else. he was uncomfortably overweight, deficient in sports, but an intellectual star performer. his father was a professor at mit, and peter used that as his entree to explore the labs. it was inevitable that he would be drawn to the tx-0. he first wandered into the small "kluge room" (a "kluge" is a piece of inelegantly constructed equipment that seems to defy logic by working properly), where three off-line flexowriters were available for punching programs onto paper tape which would later be fed into the tx-0. someone was busy punching in a tape. peter watched for a while, then began bombarding the poor soul with questions about that weird-looking little computer in the next room. then peter went up to the tx-0 itself, examined it closely, noting how it differed from other computers: it was smaller, had a crt display, and other neat toys. he decided right then to act as if he had a perfect right to be there. he got hold of a manual and soon was startling people by spouting actual make-sense computer talk, and eventually was allowed to sign up for night and weekend sessions, and to write his own programs. mckenzie worried that someone might accuse him of running some sort of summer camp, with this short-pants little kid, barely tall enough to stick his head over the tx-o's console, staring at the code that an officially sanctioned user, perhaps some self-important graduate student, would be hammering into the flexowriter, and saying in his squeaky, preadolescent voice something like "your problem is that this credit is wrong over here . . . you need this other instruction over there," and the self-important grad student would go crazy--who is this little worm?--and start screaming at him to go out and play somewhere. invariably, though, peter deutsch's comments would turn out to be correct. deutsch would also brazenly announce that he was going to write better programs than the ones currently available, and he would go and do it. samson, kotok, and the other hackers accepted peter deutsch: by virtue of his computer knowledge he was worthy of equal treatment. deutsch was not such a favorite with the officially sanctioned users, especially when he sat behind them ready to spring into action when they made a mistake on the flexowriter. these officially sanctioned users appeared at the tx-0 with the regularity of commuters. the programs they ran were statistical analyses, cross correlations, simulations of an interior of the nucleus of a cell. applications. that was fine for users, but it was sort of a waste in the minds of the hackers. what hackers had in mind was getting behind the console of the tx-0 much in the same way as getting in behind the throttle of a plane, or, as peter samson, a classical music fan, put it, computing with the tx-0 was like playing a musical instrument: an absurdly expensive musical instrument upon which you could improvise, compose, and, like the beatniks in harvard square a mile away, wail like a banshee with total creative abandon. one thing that enabled them to do this was the programming system devised by jack dennis and another professor, tom stockman. when the tx-0 arrived at mit, it had been stripped down since its days at lincoln lab: the memory had been reduced considerably, to 4,096 "words" of eighteen bits each. (a "bit" is a binary digit, either a one or zero. these binary numbers are the only thing computers understand. a series of binary numbers is called a "word.") and the tx-0 had almost no software. so jack dennis, even before he introduced the tmrc people to the tx-0, had been writing "systems programs"--the software to help users utilize the machine. the first thing dennis worked on was an assembler. this was something that translated assembly language--which used three- letter symbolic abbreviations that represented instructions to the machine--into machine language, which consisted of the binary numbers 0 and 1. the tx-0 had a rather limited assembly language: since its design allowed only two bits of each eighteen-bit word to be used for instructions to the computer, only four instructions could be used (each possible two-bit variation--00, 0 1, 10, and 11--represented an instruction). everything the computer did could be broken down to the execution of one of those four instructions: it took one instruction to add two numbers, but a series of perhaps twenty instructions to multiply two numbers. staring at a long list of computer commands written as binary numbers--for example, 10011001100001-- could make you into a babbling mental case in a matter of minutes. but the same command in assembly language might look like this: add y. after loading the computer with the assembler that dennis wrote, you could write programs in this simpler symbolic form, and wait smugly while the computer did the translation into binary for you, then you'd feed that binary "object" code back into the computer. the value of this was incalculable: it enabled programmers to write in something that looked like code, rather than an endless, dizzying series of ones and zeros. the other program that dennis worked on with stockman was something even newer--a debugger. the tx-0 came with a debugging program called ut-3, which enabled you to talk to the computer while it was running by typing commands directly into the flexowriter, but it had terrible problems-for one thing, it only accepted typed-in code that used the octal numeric system. "octal" is a base-eight number system (as opposed to binary, which is base two, and arabic--ours-which is base ten), and it is a difficult system to use. so dennis and stockman decided to write something better than ut-3 which would enable users to use the symbolic, easier-to-work-with assembly language. this came to be called flit, and it allowed users to actually find program bugs during a session, fix them, and keep the program running. (dennis would explain that "flit" stood for flexowriter interrogation tape, but clearly the name's real origin was the insect spray with that brand name.) flit was a quantum leap forward, since it liberated programmers to actually do original composing on the machine--just like musicians composing on their musical instruments. with the use of the debugger, which took up one third of the 4,096 words of the tx-o's memory, hackers were free to create a new, more daring style of programming. and what did these hacker programs do? well, sometimes, it didn't matter much at all what they did. peter samson hacked the night away on a program that would instantly convert arabic numbers to roman numerals, and jack dennis, after admiring the skill with which samson had accomplished this feat, said, "my god, why would anyone want to do such a thing?" but dennis knew why. there was ample justification in the feeling of power and accomplishment samson got when he fed in the paper tape, monitored the lights and switches, and saw what were once plain old blackboard arabic numbers coming back as the numerals the romans had hacked with. in fact it was jack dennis who suggested to samson that there were considerable uses for the tx-o's ability to send noise to the audio speaker. while there were no built-in controls for pitch, amplitude, or tone character, there was a way to control the speaker--sounds would be emitted depending on the state of the fourteenth bit in the eighteen-bit words the tx-0 had in its accumulator in a given microsecond. the sound was on or off depending on whether bit fourteen was a one or zero. so samson set about writing programs that varied the binary numbers in that slot in different ways to produce different pitches. at that time, only a few people in the country had been experimenting with using a computer to output any kind of music, and the methods they had been using required massive computations before the machine would so much as utter a note, samson, who reacted with impatience to those who warned he was attempting the impossible, wanted a computer playing music right away. so he learned to control that one bit in the accumulator so adeptly that he could command it with the authority of charlie parker on the saxophone. in a later version of this music compiler, samson rigged it so that if you made an error in your programming syntax, the flexowriter would switch to a red ribbon and print "to err is human to forgive divine." when outsiders heard the melodies of johann sebastian bach in a single-voice, monophonic square wave, no harmony, they were universally unfazed. big deal! three million dollars for this giant hunk of machinery, and why shouldn't it do at least as much as a five-dollar toy piano? it was no use to explain to these outsiders that peter samson had virtually bypassed the process by which music had been made for eons. music had always been made by directly creating vibrations that were sound. what happened in samson's program was that a load of numbers, bits of information fed into a computer, comprised a code in which the music resided. you could spend hours staring at the code, and not be able to divine where the music was. it only became music while millions of blindingly brief exchanges of data were taking place in the accumulator sitting in one of the metal, wire, and silicon racks that comprised the tx-0. samson had asked the computer, which had no apparent knowledge of how to use a voice, to lift itself in song--and the tx-0 had complied. so it was that a computer program was not only metaphorically a musical composition--it was literally a musical composition! it looked like--and was--the same kind of program which yielded complex arithmetical computations and statistical analyses. these digits that samson had jammed into the computer were a universal language which could produce anything--a bach fugue or an anti-aircraft system. samson did not say any of this to the outsiders who were unimpressed by his feat. nor did the hackers themselves discuss this--it is not even clear that they analyzed the phenomenon in such cosmic terms. peter samson did it, and his colleagues appreciated it, because it was obviously a neat hack. that was justification enough. * * * to hackers like bob saunders--balding, plump, and merry disciple of the tx-0, president of tmrc's s&p group, student of systems-- it was a perfect existence. saunders had grown up in the suburbs of chicago, and for as long as he could remember the workings of electricity and telephone circuitry had fascinated him. before beginning mit, saunders had landed a dream summer job, working for the phone company installing central office equipment, he would spend eight blissful hours with soldering iron and pliers in hand, working in the bowels of various systems, an idyll broken by lunch hours spent in deep study of phone company manuals. it was the phone company equipment underneath the tmrc layout that had convinced saunders to become active in the model railroad club. saunders, being an upperclassman, had come to the tx-0 later in his college career than kotok and samson: he had used the breathing space to actually lay the foundation for a social life, which included courtship of and eventual marriage to marge french, who had done some non-hacking computer work for a research project. still, the tx-0 was the center of his college career, and he shared the common hacker experience of seeing his grades suffer from missed classes. it didn't bother him much, because he knew that his real education was occurring in room 240 of building 26, behind the tixo console. years later he would describe himself and the others as "an elite group. other people were off studying, spending their days up on four-floor buildings making obnoxious vapors or off in the physics lab throwing particles at things or whatever it is they do. and we were simply not paying attention to what other folks were doing because we had no interest in it. they were studying what they were studying and we were studying what we were studying. and the fact that much of it was not on the officially approved curriculum was by and large immaterial." the hackers came out at night. it was the only way to take full advantage of the crucial "off-hours" of the tx-0. during the day, saunders would usually manage to make an appearance in a class or two. then some time spent performing "basic maintenance"--things like eating and going to the bathroom. he might see marge for a while. but eventually he would filter over to building 26. he would go over some of the programs of the night before, printed on the nine-and-a-half-inch-wide paper that the flexowriter used. he would annotate and modify the listing to update the code to whatever he considered the next stage of operation. maybe then he would move over to the model railroad club, and he'd swap his program with someone, checking simultaneously for good ideas and potential bugs. then back to building 26, to the kluge room next to the tx-0, to find an off-line flexowriter on which to update his code. all the while he'd be checking to see if someone had canceled a one-hour session on the machine; his own session was scheduled at something like two or three in the morning. he'd wait in the kluge room, or play some bridge back at the railroad club, until the time came. sitting at the console, facing the metal racks that held the computer's transistors, each transistor representing a location that either held or did not hold a bit of memory, saunders would set up the flexowriter, which would greet him with the word "walrus." this was something samson had hacked, in honor of lewis carroll's poem with the line "the time has come, the walrus said . . ." saunders might chuckle at that as he went into the drawer for the paper tape which held the assembler program and fed that into the tape reader. now the computer would be ready to assemble his program, so he'd take the flexowriter tape he'd been working on and send that into the computer. he'd watch the lights go on as the computer switched his code from "source" (the symbolic assembly language) to "object" code (binary), which the computer would punch out into another paper tape. since that tape was in the object code that the tx-0 understood, he'd feed it in, hoping that the program would run magnificently. there would most probably be a few fellow hackers kibitzing behind him, laughing and joking and drinking cokes and eating some junk food they'd extracted from the machine downstairs. saunders preferred the lemon jelly wedges that the others called "lemon gunkies." but at four in the morning, anything tasted good. they would all watch as the program began to run, the lights going on, the whine from the speaker humming in high or low register depending on what was in bit 14 in the accumulator, and the first thing he'd see on the crt display after the program had been assembled and run was that the program had crashed. so he'd reach into the drawer for the tape with the flit debugger and feed that into the computer. the computer would then be a debugging machine, and he'd send the program back in. now he could start trying to find out where things had gone wrong, and maybe if he was lucky he'd find out, and change things by putting in some commands by flicking some of the switches on the console in precise order, or hammering in some code on the flexowriter. once things got running--and it was always incredibly satisfying when something worked, when he'd made that roomful of transistors and wires and metal and electricity all meld together to create a precise output that he'd devised--he'd try to add the next advance to it. when the hour was over--someone already itching to get on the machine after him--saunders would be ready to spend the next few hours figuring out what the heck had made the program go belly-up. the peak hour itself was tremendously intense, but during the hours before, and even during the hours afterward, a hacker attained a state of pure concentration. when you programmed a computer, you had to be aware of where all the thousands of bits of information were going from one instruction to the next, and be able to predict--and exploit--the effect of all that movement. when you had all that information glued to your cerebral being, it was almost as if your own mind had merged into the environment of the computer. sometimes it took hours to build up to the point where your thoughts could contain that total picture, and when you did get to that point, it was such a shame to waste it that you tried to sustain it by marathon bursts, alternatively working on the computer or poring over the code that you wrote on one of the off-line flexowriters in the kluge room. you would sustain that concentration by "wrapping around" to the next day. inevitably, that frame of mind spilled over to what random shards of existence the hackers had outside of computing. the knife-and-paintbrush contingent at tmrc were not pleased at all by the infiltration of tixo-mania into the club: they saw it as a sort of trojan horse for a switch in the club focus, from railroading to computing. and if you attended one of the club meetings held every tuesday at five-fifteen, you could see the concern: the hackers would exploit every possible thread of parliamentary procedure to create a meeting as convoluted as the programs they were hacking on the tx-0. motions were made to make motions to make motions, and objections ruled out of order as if they were so many computer errors. a note in the minutes of the meeting on november 24, 1959, suggests that "we frown on certain members who would do the club a lot more good by doing more s&p-ing and less reading robert's rules of order." samson was one of the worst offenders, and at one point, an exasperated tmrc member made a motion "to purchase a cork for samson's oral diarrhea." hacking parliamentary procedure was one thing, but the logical mind-frame required for programming spilled over into more commonplace activities. you could ask a hacker a question and sense his mental accumulator processing bits until he came up with a precise answer to the question you asked. marge saunders would drive to the safeway every saturday morning in the volkswagen and upon her return ask her husband, "would you like to help me bring in the groceries?" bob saunders would reply, "no." stunned, marge would drag in the groceries herself. after the same thing occurred a few times, she exploded, hurling curses at him and demanding to know why he said no to her question. "that's a stupid question to ask," he said. "of course i won't like to help you bring in the groceries. if you ask me if i'll help you bring them in, that's another matter." it was as if marge had submitted a program into the tx-0, and the program, as programs do when the syntax is improper, had crashed. it was not until she debugged her question that bob saunders would allow it to run successfully on his own mental computer. chapter 2 the hacker ethic something new was coalescing around the tx-0: a new way of life, with a philosophy, an ethic, and a dream. there was no one moment when it started to dawn on the tx-0 hackers that by devoting their technical abilities to computing with a devotion rarely seen outside of monasteries they were the vanguard of a daring symbiosis between man and machine. with a fervor like that of young hot-rodders fixated on souping up engines, they came to take their almost unique surroundings for granted, even as the elements of a culture were forming, as legends began to accrue, as their mastery of programming started to surpass any previous recorded levels of skill, the dozen or so hackers were reluctant to acknowledge that their tiny society, on intimate terms with the tx-0, had been slowly and implicitly piecing together a body of concepts, beliefs, and mores. the precepts of this revolutionary hacker ethic were not so much debated and discussed as silently agreed upon. no manifestos were issued. no missionaries tried to gather converts. the computer did the converting, and those who seemed to follow the hacker ethic most faithfully were people like samson, saunders, and kotok, whose lives before mit seemed to be mere preludes to that moment when they fulfilled themselves behind the console of the tx-0. later there would come hackers who took the implicit ethic even more seriously than the tx-0 hackers did, hackers like the legendary greenblatt or gosper, though it would be some years yet before the tenets of hackerism would be explicitly delineated. still, even in the days of the tx-0, the planks of the platform were in place. the hacker ethic: access to computers--and anything which might teach you something about the way the world works--should be unlimited and total. always yield to the hands-on imperative! hackers believe that essential lessons can be learned about the systems--about the world--from taking things apart, seeing how they work, and using this knowledge to create new and even more interesting things. they resent any person, physical barrier, or law that tries to keep them from doing this. this is especially true when a hacker wants to fix something that (from his point of view) is broken or needs improvement. imperfect systems infuriate hackers, whose primal instinct is to debug them. this is one reason why hackers generally hate driving cars--the system of randomly programmed red lights and oddly laid out one-way streets causes delays which are so goddamned unnecessary that the impulse is to rearrange signs, open up traffic-light control boxes . . .redesign the entire system. in a perfect hacker world, anyone pissed off enough to open up a control box near a traffic light and take it apart to make it work better should be perfectly welcome to make the attempt. rules which prevent you from taking matters like that into your own hands are too ridiculous to even consider abiding by. this attitude helped the model railroad club start, on an extremely informal basis, something called the midnight requisitioning committee. when tmrc needed a set of diodes, or some extra relays, to build some new feature into the system, a few s&p people would wait until dark and find their way into the places where those things were kept. none of the hackers, who were as a rule scrupulously honest in other matters, seemed to equate this with "stealing." a willful blindness. all information should be free. if you don't have access to the information you need to improve things, how can you fix them? a free exchange of information particularly when the information was in the form of a computer program, allowed for greater overall creativity. when you were working on a machine like the tx-0, which came with almost no software, everyone would furiously write systems programs to make programming easier--tools to make tools, kept in the drawer by the console for easy access by anyone using the machine. this prevented the dread, time-wasting ritual of reinventing the wheel: instead of everybody writing his own version of the same program, the best version would be available to everyone, and everyone would be free to delve into the code and improve on that. a world studded with feature-full programs, bummed to the minimum, debugged to perfection. the belief, sometimes taken unconditionally, that information should be free was a direct tribute to the way a splendid computer, or computer program, works--the binary bits moving in the most straightforward, logical path necessary to do their complex job, what was a computer but something which benefited from a free flow of information? if, say, the accumulator found itself unable to get information from the input/output (i/o) devices like the tape reader or the switches, the whole system would collapse. in the hacker viewpoint, any system could benefit from that easy flow of information. mistrust authority--promote decentralization. the best way to promote this free exchange of information is to have an open system, something which presents no boundaries between a hacker and a piece of information or an item of equipment that he needs in his quest for knowledge, improvement, and time on-line. the last thing you need is a bureaucracy. bureaucracies, whether corporate, government, or university, are flawed systems, dangerous in that they cannot accommodate the exploratory impulse of true hackers. bureaucrats hide behind arbitrary rules (as opposed to the logical algorithms by which machines and computer programs operate): they invoke those rules to consolidate power, and perceive the constructive impulse of hackers as a threat. the epitome of the bureaucratic world was to be found at a very large company called international business machines--ibm. the reason its computers were batch-processed hulking giants was only partially because of vacuum tube technology, the real reason was that ibm was a clumsy, hulking company which did not understand the hacking impulse. if ibm had its way (so the tmrc hackers thought), the world would be batch-processed, laid out on those annoying little punch cards, and only the most privileged of priests would be permitted to actually interact with the computer. all you had to do was look at someone in the ibm world, and note the button-down white shirt, the neatly pinned black tie, the hair carefully held in place, and the tray of punch cards in hand. you could wander into the computation center, where the 704, the 709, and later the 7090 were stored--the best ibm had to offer--and see the stifling orderliness, down to the roped-off areas beyond which non-authorized people could not venture. and you could compare that to the extremely informal atmosphere around the tx-0, where grungy clothes were the norm and almost anyone could wander in. now, ibm had done and would continue to do many things to advance computing. by its sheer size and mighty influence, it had made computers a permanent part of life in america. to many people, the words ibm and computer were virtually synonymous. ibm's machines were reliable workhorses, worthy of the trust that businessmen and scientists invested in them. this was due in part to ibm's conservative approach: it would not make the most technologically advanced machines, but would rely on proven concepts and careful, aggressive marketing. as ibm's dominance of the computer field was established, the company became an empire unto itself, secretive and smug. what really drove the hackers crazy was the attitude of the ibm priests and sub-priests, who seemed to think that ibm had the only "real" computers, and the rest were all trash. you couldn't talk to those people--they were beyond convincing. they were batch-processed people, and it showed not only in their preference of machines, but in their idea about the way a computation center, and a world, should be run. those people could never understand the obvious superiority of a decentralized system, with no one giving orders: a system where people could follow their interests, and if along the way they discovered a flaw in the system, they could embark on ambitious surgery. no need to get a requisition form. just a need to get something done. this antibureaucratic bent coincided neatly with the personalities of many of the hackers, who since childhood had grown accustomed to building science projects while the rest of their classmates were banging their heads together and learning social skills on the field of sport. these young adults who were once outcasts found the computer a fantastic equalizer, experiencing a feeling, according to peter samson, "like you opened the door and walked through this grand new universe . . ." once they passed through that door and sat behind the console of a million-dollar computer, hackers had power. so it was natural to distrust any force which might try to limit the extent of that power. hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, or position. the ready acceptance of twelve-year-old peter deutsch in the tx-0 community (though not by non-hacker graduate students) was a good example. likewise, people who trotted in with seemingly impressive credentials were not taken seriously until they proved themselves at the console of a computer. this meritocratic trait was not necessarily rooted in the inherent goodness of hacker hearts--it was mainly that hackers cared less about someone's superficial characteristics than they did about his potential to advance the general state of hacking, to create new programs to admire, to talk about that new feature in the system. you can create art and beauty on a computer. samson's music program was an example. but to hackers, the art of the program did not reside in the pleasing sounds emanating from the on-line speaker. the code of the program held a beauty of its own. (samson, though, was particularly obscure in refusing to add comments to his source code explaining what he was doing at a given time. one well-distributed program samson wrote went on for hundreds of assembly language instructions, with only one comment beside an instruction which contained the number 1750. the comment was ripjsb, and people racked their brains about its meaning until someone figured out that 1750 was the year bach died, and that samson had written an abbreviation for rest in peace johann sebastian bach.) a certain esthetic of programming style had emerged. because of the limited memory space of the tx-0 (a handicap that extended to all computers of that era), hackers came to deeply appreciate innovative techniques which allowed programs to do complicated tasks with very few instructions. the shorter a program was, the more space you had left for other programs, and the faster a program ran. sometimes when you didn't need speed or space much, and you weren't thinking about art and beauty, you'd hack together an ugly program, attacking the problem with "brute force" methods. "well, we can do this by adding twenty numbers," samson might say to himself, "and it's quicker to write instructions to do that than to think out a loop in the beginning and the end to do the same job in seven or eight instructions." but the latter program might be admired by fellow hackers, and some programs were bummed to the fewest lines so artfully that the author's peers would look at it and almost melt with awe. sometimes program bumming became competitive, a macho contest to prove oneself so much in command of the system that one could recognize elegant shortcuts to shave off an instruction or two, or, better yet, rethink the whole problem and devise a new algorithm which would save a whole block of instructions. (an algorithm is a specific procedure which one can apply to solve a complex computer problem; it is sort of a mathematical skeleton key.) this could most emphatically be done by approaching the problem from an offbeat angle that no one had ever thought of before but that in retrospect made total sense. there was definitely an artistic impulse residing in those who could utilize this genius-from-mars techniques black-magic, visionary quality which enabled them to discard the stale outlook of the best minds on earth and come up with a totally unexpected new algorithm. this happened with the decimal print routine program. this was a subroutines program within a program that you could sometimes integrate into many different programs--to translate binary numbers that the computer gave you into regular decimal numbers. in saunders' words, this problem became the "pawn's ass of programming--if you could write a decimal print routine which worked you knew enough about the computer to call yourself a programmer of sorts." and if you wrote a great decimal print routine, you might be able to call yourself a hacker. more than a competition, the ultimate bumming of the decimal print routine became a sort of hacker holy grail. various versions of decimal print routines had been around for some months. if you were being deliberately stupid about it, or if you were a genuine moron--an out-and-out "loser"--it might take you a hundred instructions to get the computer to convert machine language to decimal. but any hacker worth his salt could do it in less, and finally, by taking the best of the programs, bumming an instruction here and there, the routine was diminished to about fifty instructions. after that, things got serious. people would work for hours, seeking a way to do the same thing in fewer lines of code. it became more than a competition; it was a quest. for all the effort expended, no one seemed to be able to crack the fifty-line barrier. the question arose whether it was even possible to do it in less. was there a point beyond which a program could not be bummed? among the people puzzling with this dilemma was a fellow named jenson, a tall, silent hacker from maine who would sit quietly in the kluge room and scribble on printouts with the calm demeanor of a backwoodsman whittling. jenson was always looking for ways to compress his programs in time and space--his code was a completely bizarre sequence of intermingled boolean and arithmetic functions, often causing several different computations to occur in different sections of the same eighteen-bit "word." amazing things, magical stunts. before jenson, there had been general agreement that the only logical algorithm for a decimal print routine would have the machine repeatedly subtracting, using a table of the powers of ten to keep the numbers in proper digital columns. jenson somehow figured that a powers-of-ten table wasn't necessary; he came up with an algorithm that was able to convert the digits in a reverse order but, by some digital sleight of hand, print them out in the proper order. there was a complex mathematical justification to it that was clear to the other hackers only when they saw jenson's program posted on a bulletin board, his way of telling them that he had taken the decimal print routine to its limit. forty-six instructions. people would stare at the code and their jaws would drop. marge saunders remembers the hackers being unusually quiet for days afterward. "we knew that was the end of it," bob saunders later said. "that was nirvana." computers can change your life for the better. this belief was subtly manifest. rarely would a hacker try to impose a view of the myriad advantages of the computer way of knowledge to an outsider. yet this premise dominated the everyday behavior of the tx-0 hackers, as well as the generations of hackers that came after them. surely the computer had changed their lives, enriched their lives, given their lives focus, made their lives adventurous. it had made them masters of a certain slice of fate. peter samson later said, "we did it twenty-five to thirty percent for the sake of doing it because it was something we could do and do well, and sixty percent for the sake of having something which was in its metaphorical way alive, our offspring, which would do things on its own when we were finished. that's the great thing about programming, the magical appeal it has . . . once you fix a behavioral problem [a computer or program] has, it's fixed forever, and it is exactly an image of what you meant." like aladdin's lamp, you could get it to do your bidding. surely everyone could benefit from experiencing this power. surely everyone could benefit from a world based on the hacker ethic. this was the implicit belief of the hackers, and the hackers irreverently extended the conventional point of view of what computers could and should do--leading the world to a new way of looking and interacting with computers. this was not easily done. even at such an advanced institution as mit, some professors considered a manic affinity for computers as frivolous, even demented. tmrc hacker bob wagner once had to explain to an engineering professor what a computer was. wagner experienced this clash of computer versus anti-computer even more vividly when he took a numerical analysis class in which the professor required each student to do homework using rattling, clunky electromechanical calculators. kotok was in the same class, and both of them were appalled at the prospect of working with those lo-tech machines. "why should we," they asked, "when we've got this computer?" so wagner began working on a computer program that would emulate the behavior of a calculator. the idea was outrageous. to some, it was a misappropriation of valuable machine time. according to the standard thinking on computers, their time was too precious that one should only attempt things which took maximum advantage of the computer, things that otherwise would take roomfuls of mathematicians days of mindless calculating. hackers felt otherwise: anything that seemed interesting or fun was fodder for computing--and using interactive computers, with no one looking over your shoulder and demanding clearance for your specific project, you could act on that belief. after two or three months of tangling with intricacies of floating-point arithmetic (necessary to allow the program to know where to place the decimal point) on a machine that had no simple method to perform elementary multiplication, wagner had written three thousand lines of code that did the job. he had made a ridiculously expensive computer perform the function of a calculator that cost a thousand times less. to honor this irony, he called the program expensive desk calculator, and proudly did the homework for his class on it. his grade--zero. "you used a computer!" the professor told him. "this can't be right." wagner didn't even bother to explain. how could he convey to his teacher that the computer was making realities out of what were once incredible possibilities? or that another hacker had even written a program called expensive typewriter that converted the tx-0 to something you could write text on, could process your writing in strings of characters and print it out on the flexowriter--could you imagine a professor accepting a classwork report written by the computer? how could that professor--how could, in fact, anyone who hadn't been immersed in this uncharted man-machine universe--understand how wagner and his fellow hackers were routinely using the computer to simulate, according to wagner, "strange situations which one could scarcely envision otherwise"? the professor would learn in time, as would everyone, that the world opened up by the computer was a limitless one. if anyone needed further proof, you could cite the project that kotok was working on in the computation center, the chess program that bearded al professor "uncle" john mccarthy, as he was becoming known to his hacker students, had begun on the ibm 704. even though kotok and the several other hackers helping him on the program had only contempt for the ibm batch-processing mentality that pervaded the machine and the people around it, they had managed to scrounge some late-night time to use it interactively, and had been engaging in an informal battle with the systems programmers on the 704 to see which group would be known as the biggest consumer of computer time. the lead would bounce back and forth, and the white-shirt-and-black-tie 704 people were impressed enough to actually let kotok and his group touch the buttons and switches on the 704: rare sensual contact with a vaunted ibm beast. kotok's role in bringing the chess program to life was indicative of what was to become the hacker role in artificial intelligence: a heavy head like mccarthy or like his colleague marvin minsky would begin a project or wonder aloud whether something might be possible, and the hackers, if it interested them, would set about doing it. the chess program had been started using fortran, one of the early computer languages. computer languages look more like english than assembly language, are easier to write with, and do more things with fewer instructions; however, each time an instruction is given in a computer language like fortran, the computer must first translate that command into its own binary language. a program called a compiler does this, and the compiler takes up time to do its job, as well as occupying valuable space within the computer. in effect, using a computer language puts you an extra step away from direct contact with the computer, and hackers generally preferred assembly or, as they called it, "machine" language to less elegant, "higher-level" languages like fortran. kotok, though, recognized that because of the huge amounts of numbers that would have to be crunched in a chess program, part of the program would have to be done in fortran, and part in assembly. they hacked it part by part, with "move generators," basic data structures, and all kinds of innovative algorithms for strategy. after feeding the machine the rules for moving each piece, they gave it some parameters by which to evaluate its position, consider various moves, and make the move which would advance it to the most advantageous situation. kotok kept at it for years, the program growing as mit kept upgrading its ibm computers, and one memorable night a few hackers gathered to see the program make some of its first moves in a real game. its opener was quite respectable, but after eight or so exchanges there was real trouble, with the computer about to be checkmated. everybody wondered how the computer would react. it too a while (everyone knew that during those pauses the computer was actually "thinking," if your idea of thinking included mechanically considering various moves, evaluating them, rejecting most, and using a predefined set of parameters to ultimately make a choice). finally, the computer moved a pawn two squares forward--illegally jumping over another piece. a bug! but a clever one--it got the computer out of check. maybe the program was figuring out some new algorithm with which to conquer chess. at other universities, professors were making public proclamations that computers would never be able to beat a human being in chess. hackers knew better. they would be the ones who would guide computers to greater heights than anyone expected. and the hackers, by fruitful, meaningful association with the computer, would be foremost among the beneficiaries. but they would not be the only beneficiaries. everyone could gain something by the use of thinking computers in an intellectually automated world. and wouldn't everyone benefit even more by approaching the world with the same inquisitive intensity, skepticism toward bureaucracy, openness to creativity, unselfishness in sharing accomplishments, urge to make improvements, and desire to build as those who followed the hacker ethic? by accepting others on the same unprejudiced basis by which computers accepted anyone who entered code into a flexowriter? wouldn't we benefit if we learned from computers the means of creating a perfect system? if everyone could interact with computers with the same innocent, productive, creative impulse that hackers did, the hacker ethic might spread through society like a benevolent ripple, and computers would indeed change the world for the better. in the monastic confines of the massachusetts institute of technology, people had the freedom to live out this dream--the hacker dream. no one dared suggest that the dream might spread. instead, people set about building, right there at mit, a hacker xanadu the likes of which might never be duplicated. hackers, heroes of the computer revolution, by steven levy (c)1984 by steven levy end of the project gutenberg ebook of hackers, heroes of the computer revolution, by stephen levy *** end of this project gutenberg ebook hackers, heroes of computer rev. *** ***** this file should be named 729.txt or 729.zip ***** this and all associated files of various formats will be found in: http://www.gutenberg.org/7/2/729/ updated editions will replace the previous one--the old editions will be renamed. creating the works from public domain print editions means that no one owns a united states copyright in these works, so the foundation (and you!) can copy and distribute it in the united states without permission and without paying copyright royalties. special rules, set forth in the general terms of use part of this license, apply to copying and distributing project gutenberg-tm electronic works to protect the project gutenberg-tm concept and trademark. project gutenberg is a registered trademark, and may not be used if you charge for the ebooks, unless you receive specific permission. if you do not charge anything for copies of this ebook, complying with the rules is very easy. you may use this ebook for nearly any purpose such as creation of derivative works, reports, performances and research. they may be modified and printed and given away--you may do practically anything with public domain ebooks. redistribution is subject to the trademark license, especially commercial redistribution. *** start: full license *** the full project gutenberg license please read this before you distribute or use this work to protect the project gutenberg-tm mission of promoting the free distribution of electronic works, by using or distributing this work (or any other work associated in any way with the phrase "project gutenberg"), you agree to comply with all the terms of the full project gutenberg-tm license available with this file or online at www.gutenberg.org/license. section 1. general terms of use and redistributing project gutenberg-tm electronic works 1.a. by reading or using any part of this project gutenberg-tm electronic work, you indicate that you have read, understand, agree to and accept all the terms of this license and intellectual property (trademark/copyright) agreement. if you do not agree to abide by all the terms of this agreement, you must cease using and return or destroy all copies of project gutenberg-tm electronic works in your possession. if you paid a fee for obtaining a copy of or access to a project gutenberg-tm electronic work and you do not agree to be bound by the terms of this agreement, you may obtain a refund from the person or entity to whom you paid the fee as set forth in paragraph 1.e.8. 1.b. "project gutenberg" is a registered trademark. it may only be used on or associated in any way with an electronic work by people who agree to be bound by the terms of this agreement. there are a few things that you can do with most project gutenberg-tm electronic works even without complying with the full terms of this agreement. see paragraph 1.c below. there are a lot of things you can do with project gutenberg-tm electronic works if you follow the terms of this agreement and help preserve free future access to project gutenberg-tm electronic works. see paragraph 1.e below. 1.c. the project gutenberg literary archive foundation ("the foundation" or pglaf), owns a compilation copyright in the collection of project gutenberg-tm electronic works. nearly all the individual works in the collection are in the public domain in the united states. if an individual work is in the public domain in the united states and you are located in the united states, we do not claim a right to prevent you from copying, distributing, performing, displaying or creating derivative works based on the work as long as all references to project gutenberg are removed. of course, we hope that you will support the project gutenberg-tm mission of promoting free access to electronic works by freely sharing project gutenberg-tm works in compliance with the terms of this agreement for keeping the project gutenberg-tm name associated with the work. you can easily comply with the terms of this agreement by keeping this work in the same format with its attached full project gutenberg-tm license when you share it without charge with others. this particular work is one of the few copyrighted individual works included with the permission of the copyright holder. information on the copyright owner for this particular work and the terms of use imposed by the copyright holder on this work are set forth at the beginning of this work. 1.d. the copyright laws of the place where you are located also govern what you can do with this work. copyright laws in most countries are in a constant state of change. if you are outside the united states, check the laws of your country in addition to the terms of this agreement before downloading, copying, displaying, performing, distributing or creating derivative works based on this work or any other project gutenberg-tm work. the foundation makes no representations concerning the copyright status of any work in any country outside the united states. 1.e. unless you have removed all references to project gutenberg: 1.e.1. the following sentence, with active links to, or other immediate access to, the full project gutenberg-tm license must appear prominently whenever any copy of a project gutenberg-tm work (any work on which the phrase "project gutenberg" appears, or with which the phrase "project gutenberg" is associated) is accessed, displayed, performed, viewed, copied or distributed: this ebook is for the use of anyone anywhere at no cost and with almost no restrictions whatsoever. you may copy it, give it away or re-use it under the terms of the project gutenberg license included with this ebook or online at www.gutenberg.org 1.e.2. if an individual project gutenberg-tm electronic work is derived from the public domain (does not contain a notice indicating that it is posted with permission of the copyright holder), the work can be copied and distributed to anyone in the united states without paying any fees or charges. if you are redistributing or providing access to a work with the phrase "project gutenberg" associated with or appearing on the work, you must comply either with the requirements of paragraphs 1.e.1 through 1.e.7 or obtain permission for the use of the work and the project gutenberg-tm trademark as set forth in paragraphs 1.e.8 or 1.e.9. 1.e.3. if an individual project gutenberg-tm electronic work is posted with the permission of the copyright holder, your use and distribution must comply with both paragraphs 1.e.1 through 1.e.7 and any additional terms imposed by the copyright holder. additional terms will be linked to the project gutenberg-tm license for all works posted with the permission of the copyright holder found at the beginning of this work. 1.e.4. do not unlink or detach or remove the full project gutenberg-tm license terms from this work, or any files containing a part of this work or any other work associated with project gutenberg-tm. 1.e.5. do not copy, display, perform, distribute or redistribute this electronic work, or any part of this electronic work, without prominently displaying the sentence set forth in paragraph 1.e.1 with active links or immediate access to the full terms of the project gutenberg-tm license. 1.e.6. you may convert to and distribute this work in any binary, compressed, marked up, nonproprietary or proprietary form, including any word processing or hypertext form. however, if you provide access to or distribute copies of a project gutenberg-tm work in a format other than "plain vanilla ascii" or other format used in the official version posted on the official project gutenberg-tm web site (www.gutenberg.org), you must, at no additional cost, fee or expense to the user, provide a copy, a means of exporting a copy, or a means of obtaining a copy upon request, of the work in its original "plain vanilla ascii" or other form. any alternate format must include the full project gutenberg-tm license as specified in paragraph 1.e.1. 1.e.7. do not charge a fee for access to, viewing, displaying, performing, copying or distributing any project gutenberg-tm works unless you comply with paragraph 1.e.8 or 1.e.9. 1.e.8. you may charge a reasonable fee for copies of or providing access to or distributing project gutenberg-tm electronic works provided that - you pay a royalty fee of 20% of the gross profits you derive from the use of project gutenberg-tm works calculated using the method you already use to calculate your applicable taxes. the fee is owed to the owner of the project gutenberg-tm trademark, but he has agreed to donate royalties under this paragraph to the project gutenberg literary archive foundation. royalty payments must be paid within 60 days following each date on which you prepare (or are legally required to prepare) your periodic tax returns. royalty payments should be clearly marked as such and sent to the project gutenberg literary archive foundation at the address specified in section 4, "information about donations to the project gutenberg literary archive foundation." - you provide a full refund of any money paid by a user who notifies you in writing (or by e-mail) within 30 days of receipt that s/he does not agree to the terms of the full project gutenberg-tm license. you must require such a user to return or destroy all copies of the works possessed in a physical medium and discontinue all use of and all access to other copies of project gutenberg-tm works. - you provide, in accordance with paragraph 1.f.3, a full refund of any money paid for a work or a replacement copy, if a defect in the electronic work is discovered and reported to you within 90 days of receipt of the work. - you comply with all other terms of this agreement for free distribution of project gutenberg-tm works. 1.e.9. if you wish to charge a fee or distribute a project gutenberg-tm electronic work or group of works on different terms than are set forth in this agreement, you must obtain permission in writing from both the project gutenberg literary archive foundation and michael hart, the owner of the project gutenberg-tm trademark. contact the foundation as set forth in section 3 below. 1.f. 1.f.1. project gutenberg volunteers and employees expend considerable effort to identify, do copyright research on, transcribe and proofread public domain works in creating the project gutenberg-tm collection. despite these efforts, project gutenberg-tm electronic works, and the medium on which they may be stored, may contain "defects," such as, but not limited to, incomplete, inaccurate or corrupt data, transcription errors, a copyright or other intellectual property infringement, a defective or damaged disk or other medium, a computer virus, or computer codes that damage or cannot be read by your equipment. 1.f.2. limited warranty, disclaimer of damages - except for the "right of replacement or refund" described in paragraph 1.f.3, the project gutenberg literary archive foundation, the owner of the project gutenberg-tm trademark, and any other party distributing a project gutenberg-tm electronic work under this agreement, disclaim all liability to you for damages, costs and expenses, including legal fees. you agree that you have no remedies for negligence, strict liability, breach of warranty or breach of contract except those provided in paragraph 1.f.3. you agree that the foundation, the trademark owner, and any distributor under this agreement will not be liable to you for actual, direct, indirect, consequential, punitive or incidental damages even if you give notice of the possibility of such damage. 1.f.3. limited right of replacement or refund - if you discover a defect in this electronic work within 90 days of receiving it, you can receive a refund of the money (if any) you paid for it by sending a written explanation to the person you received the work from. if you received the work on a physical medium, you must return the medium with your written explanation. the person or entity that provided you with the defective work may elect to provide a replacement copy in lieu of a refund. if you received the work electronically, the person or entity providing it to you may choose to give you a second opportunity to receive the work electronically in lieu of a refund. if the second copy is also defective, you may demand a refund in writing without further opportunities to fix the problem. 1.f.4. except for the limited right of replacement or refund set forth in paragraph 1.f.3, this work is provided to you 'as-is', with no other warranties of any kind, express or implied, including but not limited to warranties of merchantability or fitness for any purpose. 1.f.5. some states do not allow disclaimers of certain implied warranties or the exclusion or limitation of certain types of damages. if any disclaimer or limitation set forth in this agreement violates the law of the state applicable to this agreement, the agreement shall be interpreted to make the maximum disclaimer or limitation permitted by the applicable state law. the invalidity or unenforceability of any provision of this agreement shall not void the remaining provisions. 1.f.6. indemnity - you agree to indemnify and hold the foundation, the trademark owner, any agent or employee of the foundation, anyone providing copies of project gutenberg-tm electronic works in accordance with this agreement, and any volunteers associated with the production, promotion and distribution of project gutenberg-tm electronic works, harmless from all liability, costs and expenses, including legal fees, that arise directly or indirectly from any of the following which you do or cause to occur: (a) distribution of this or any project gutenberg-tm work, (b) alteration, modification, or additions or deletions to any project gutenberg-tm work, and (c) any defect you cause. section 2. information about the mission of project gutenberg-tm project gutenberg-tm is synonymous with the free distribution of electronic works in formats readable by the widest variety of computers including obsolete, old, middle-aged and new computers. it exists because of the efforts of hundreds of volunteers and donations from people in all walks of life. volunteers and financial support to provide volunteers with the assistance they need are critical to reaching project gutenberg-tm's goals and ensuring that the project gutenberg-tm collection will remain freely available for generations to come. in 2001, the project gutenberg literary archive foundation was created to provide a secure and permanent future for project gutenberg-tm and future generations. to learn more about the project gutenberg literary archive foundation and how your efforts and donations can help, see sections 3 and 4 and the foundation information page at www.gutenberg.org section 3. information about the project gutenberg literary archive foundation the project gutenberg literary archive foundation is a non profit 501(c)(3) educational corporation organized under the laws of the state of mississippi and granted tax exempt status by the internal revenue service. the foundation's ein or federal tax identification number is 64-6221541. contributions to the project gutenberg literary archive foundation are tax deductible to the full extent permitted by u.s. federal laws and your state's laws. the foundation's principal office is located at 4557 melan dr. s. fairbanks, ak, 99712., but its volunteers and employees are scattered throughout numerous locations. its business office is located at 809 north 1500 west, salt lake city, ut 84116, (801) 596-1887. email contact links and up to date contact information can be found at the foundation's web site and official page at www.gutenberg.org/contact for additional contact information: dr. gregory b. newby chief executive and director gbnewby@pglaf.org section 4. information about donations to the project gutenberg literary archive foundation project gutenberg-tm depends upon and cannot survive without wide spread public support and donations to carry out its mission of increasing the number of public domain and licensed works that can be freely distributed in machine readable form accessible by the widest array of equipment including outdated equipment. many small donations ($1 to $5,000) are particularly important to maintaining tax exempt status with the irs. the foundation is committed to complying with the laws regulating charities and charitable donations in all 50 states of the united states. compliance requirements are not uniform and it takes a considerable effort, much paperwork and many fees to meet and keep up with these requirements. we do not solicit donations in locations where we have not received written confirmation of compliance. to send donations or determine the status of compliance for any particular state visit www.gutenberg.org/donate while we cannot and do not solicit contributions from states where we have not met the solicitation requirements, we know of no prohibition against accepting unsolicited donations from donors in such states who approach us with offers to donate. international donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the united states. u.s. laws alone swamp our small staff. please check the project gutenberg web pages for current donation methods and addresses. donations are accepted in a number of other ways including checks, online payments and credit card donations. to donate, please visit: www.gutenberg.org/donate section 5. general information about project gutenberg-tm electronic works. professor michael s. hart was the originator of the project gutenberg-tm concept of a library of electronic works that could be freely shared with anyone. for forty years, he produced and distributed project gutenberg-tm ebooks with only a loose network of volunteer support. project gutenberg-tm ebooks are often created from several printed editions, all of which are confirmed as public domain in the u.s. unless a copyright notice is included. thus, we do not necessarily keep ebooks in compliance with any particular paper edition. most people start at our web site which has the main pg search facility: www.gutenberg.org this web site includes information about project gutenberg-tm, including how to make donations to the project gutenberg literary archive foundation, how to help produce our new ebooks, and how to subscribe to our email newsletter to hear about new ebooks. ebooks.  
